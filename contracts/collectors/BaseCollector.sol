pragma solidity 0.5.11;

import "@openzeppelin/upgrades/contracts/Initializable.sol";
import "../access/Operators.sol";
import "../validators/IValidatorRegistration.sol";
import "../validators/ValidatorsRegistry.sol";
import "../Deposits.sol";
import "../Settings.sol";

/**
 * @title Base Collector
 * Base contract to be inherited by contracts which accumulate deposits for becoming a validator.
 * Implements functionality for registering validators.
 */
contract BaseCollector is Initializable {
    // Tracks accumulated contract ether.
    uint256 public totalSupply;

    // The counter of the last entity which hasn't accumulated validator deposit amount.
    uint256 public entityCounter;

    // List of entity IDs (prefix + entityCounter) which are ready to be regsitered as Validators.
    bytes32[] internal readyEntities;

    // Address of the Deposits contract.
    Deposits internal deposits;

    // Address of the Settings contract.
    Settings internal settings;

    // Address of the Operators contract.
    Operators private operators;

    // Address of the VRC (deployed by Ethereum).
    IValidatorRegistration private validatorRegistration;

    // Address of the Validators Registry contract.
    ValidatorsRegistry private validatorsRegistry;

    /**
    * Constructor for initializing the BaseCollector contract.
    * @dev Must be called by contracts which inherit from it.
    * @param _deposits - Address of the Deposits contract.
    * @param _settings - Address of the Settings contract.
    * @param _operators - Address of the Operators contract.
    * @param _validatorRegistration - Address of the VRC (deployed by Ethereum).
    * @param _validatorsRegistry - Address of the Validators Registry contract.
    */
    function initialize(
        Deposits _deposits,
        Settings _settings,
        Operators _operators,
        IValidatorRegistration _validatorRegistration,
        ValidatorsRegistry _validatorsRegistry
    )
        public initializer
    {
        deposits = _deposits;
        settings = _settings;
        operators = _operators;
        validatorRegistration = _validatorRegistration;
        validatorsRegistry = _validatorsRegistry;
        entityCounter = 1;
    }

    /**
    * Function for registering ready entities as validators.
    * _pubKey - BLS public key of the validator, generated by the operator.
    * _signature - BLS signature of the validator, generated by the operator.
    */
    function registerValidator(bytes calldata _pubKey, bytes calldata _signature) external {
        require(readyEntities.length > 0, "There are no ready entities.");
        require(operators.isOperator(msg.sender), "Permission denied.");

        bytes32 entityId = readyEntities[readyEntities.length - 1];
        readyEntities.pop();

        validatorsRegistry.register(_pubKey, entityId);
        uint256 validatorDepositAmount = settings.validatorDepositAmount();
        totalSupply -= validatorDepositAmount;
        validatorRegistration.deposit.value(validatorDepositAmount)(
            _pubKey,
            settings.withdrawalCredentials(),
            _signature
        );
    }
}
